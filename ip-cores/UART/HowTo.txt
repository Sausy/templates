/*
Two module
uart_tx
uart_rx

!!!!! ================example call =======+!!!!!!!!!!!!
PS.:
ASCII 65 to 90 equals A to Z
 and new line + cr ===
  8'd13: i_Tx_Byte <= 8'd13;
  8'd14: i_Tx_Byte <= 8'd10;

//---TX regs and wires
reg        i_Tx_DV = 1;
reg [7:0]  i_Tx_Byte = 8'd68;
wire       o_Tx_Enable, o_Tx_Done, o_Tx_Active;

reg        i_Tx_DV2 = 1;
reg [7:0]  i_Tx_Byte2; //= 8'd68;
wire       o_Tx_Enable2, o_Tx_Done2, o_Tx_Active2;

wire       o_Rx_DV;
wire [7:0] o_Rx_Byte;

reg [7:0]  rx_DATA [21:0];// = 8'd69;

uart_tx u1(
	.i_Clock(iCLK),
  .i_BAUD(9600),
  .i_Tx_DV(i_Tx_DV),
  .i_Tx_Byte(i_Tx_Byte),
  .o_Tx_Active(o_Tx_Active),
  .o_Tx_Serial(bMKR_D[10]), ///TX PIN
  .o_Tx_Enable(o_Tx_Enable),
  .o_Tx_Done(o_Tx_Done)
);



reg   [7:0]   	sendcounter = 0;
reg   [7:0]   	foo_cnt = 0;
reg 				waitflag_tx = 0;
always @(posedge iCLK)
begin
	waitflag_tx <= o_Tx_Done & !o_Tx_Active;
	i_Tx_DV <= 0;
	if(waitflag_tx == 1)begin
		sendcounter <= sendcounter + 1;
		case(sendcounter)
			 8'd0: i_Tx_Byte <= 8'd68;
			 8'd1: i_Tx_Byte <= 8'd65;
			 8'd2: i_Tx_Byte <= 8'd84;
			 8'd3: i_Tx_Byte <= 8'd32;
			 8'd4: i_Tx_Byte <= position[0][7:0];//transit_flag;
			 8'd5: i_Tx_Byte <= 8'd124;
			 8'd6: i_Tx_Byte <= position[1][7:0];//transit_flag;
			 8'd7: i_Tx_Byte <= 8'd124;
			 8'd8: i_Tx_Byte <= position[2][7:0];//transit_flag;
			 8'd9: i_Tx_Byte <= 8'd124;
			 8'd10: i_Tx_Byte <= position[3][7:0];//transit_flag;
			 8'd11: i_Tx_Byte <= 8'd124;
			 8'd12: i_Tx_Byte <= foo2;
			 8'd13: i_Tx_Byte <= 8'd13;
			 8'd14: i_Tx_Byte <= 8'd10;//---
			 8'd15: i_Tx_Byte <= 8'd70;
			 8'd16: i_Tx_Byte <= tx_frame[31:24];
			 8'd17: i_Tx_Byte <= 8'd32;
			 8'd18: i_Tx_Byte <= 8'd80;
			 8'd19: i_Tx_Byte <= tx_frame[23:16];
			 8'd20: i_Tx_Byte <= tx_frame[15:8];
			 8'd21: i_Tx_Byte <= tx_frame[7:0];
			 8'd22: i_Tx_Byte <= 8'd13;
			 8'd23: i_Tx_Byte <= 8'd10;
       default : begin
      i_Tx_Byte <= 8'd10;
      sendcounter <= 0;
     end
  endcase
  waitflag_tx <= 0;
  i_Tx_DV <= 1;

end

*/

cmake_minimum_required(VERSION 2.5)
project(roboy_lighthouse2)

#SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/nanopb/extra)
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Werror -g -O0")

#SET(CMAKE_BUILD_TYPE Debug)

#find_package(Nanopb REQUIRED)
#include_directories(${NANOPB_INCLUDE_DIRS})

#==============================================================================
# Dependencies
#==============================================================================
#find_package(catkin REQUIRED COMPONENTS
#				roscpp
				#roslint
				#rqt_gui
				#rqt_gui_cpp
#				std_msgs
#				message_generation
        #roboy_middleware_msgs
#				)
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)

#catkin_package(CATKIN_DEPENDS
#        message_runtime
#				roboy_middleware_msgs
#        )



#==============================================================================
# Generate Headers
#==============================================================================
#nanopb_generate_cpp(PROTO_SRCS PROTO_HDRS RELPATH proto
#	proto/lighthouse.proto)


include_directories(${CMAKE_CURRENT_BINARY_DIR})
#add_custom_target(generate_proto_sources DEPENDS ${PROTO_SRCS} ${PROTO_HDRS})
#set_source_files_properties(${PROTO_SRCS} ${PROTO_HDRS}
#    PROPERTIES GENERATED TRUE)


SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -g")

#==============================================================================
# Dependencies
#==============================================================================
include_directories(
        lib/
        include/
				#${catkin_INCLUDE_DIRS}
				${Boost_INCLUDE_DIRS}
      )

#==============================================================================
# Application
#==============================================================================

FILE(GLOB SRC_FILES src/*.cpp)
FILE(GLOB INCLUDE_FILES lib/*.hpp)

#add_library(${PROJECT_NAME}_core
#   src/Algorithm.cpp
#)

#add_dependencies(${PROJECT_NAME}_core
#  ${catkin_EXPORTED_TARGETS}
#)

add_executable( ${PROJECT_NAME}
        ${SRC_FILES}
        ${INCLUDE_FILES}
        main.cpp
        #${PROTO_SRCS}
				#${PROTO_HDRS}
				#LUT/lut.h
        )
ament_target_dependencies(${PROJECT_NAME}
  			rclcpp
  			std_msgs
				)

#add_dependencies(${PROJECT_NAME}
#  ${catkin_EXPORTED_TARGETS}
#)

#target_link_libraries( ${PROJECT_NAME} -lpthread -lrt -lncurses ${catkin_LIBRARIES})

ament_target_dependencies(${PROJECT_NAME}
  rclcpp
  std_msgs
	)
#install(TARGETS ${PROJECT_NAME}
#  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})
install(TARGETS ${PROJECT_NAME}
  DESTINATION lib/${PROJECT_NAME})
install(DIRECTORY include/
  DESTINATION include)
ament_export_include_directories(include)
ament_export_dependencies(std_msgs)
ament_package()
